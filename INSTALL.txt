/* Author: Guilherme de Campos Affonso (Guiga) */
/* Contact: jp.support@robotis.com */


//*********************************************************************/
//
// *********    DYNAMIXEL Mikata Arm 4DOF Sample Program     **********/
//
//

This example was written based on the following assumptions:

1. Connecting 5 DYNAMIXEL XM430-W350, or XH430-V350, with ID from 1 to 5, being
2. 1 the base link actuator, 5 the gripper actuator
3. Factory reset configuration subsided to dxl_setup 's changes

This sample was tested on Ubuntu 16.04 (x86_64) with ROS kinetic and Dynamixel SDK 3.4.7. Code change may be needed for other environments.

When using DYNAMIXEL models other than XM430-W350 or XH430-V350, please check e-Manual's Control Table carefully and change the code accordingly.

Any questions, bugs, etc please contact
    jp.support@robotis.com

//*********************************************************************/


/* STARTUP GUIDE */

On use "Mikata Arm" for first time, please follow the installation procedure as below.

1. install ROS kinetic following instructions at http://wiki.ros.org/kinetic/Installation/

2. install other dependencies
  $ sudo apt-get install ros-kinetic-desktop-full ros-kinetic-dynamixel-sdk ros-kinetic-jsk-rviz-plugins python-catkin-tools libeigen3-dev

3. create catkin workspace, clone this repository, and build package.
  $ mkdir -p ~/mikata_arm_ws/src
  $ cd ~/mikata_arm_ws/src
  $ catkin_init_workspace
  $ git clone https://github.com/ROBOTIS-JAPAN-GIT/dynamixel_mikata_arm.git
  $ cd ..
  $ catkin build

4. In order to enable the USB2DXL and set the proper latency, add udev rules.
  $ cd ~/mikata_arm_ws
  $ sudo cp src/dynamixel_mikata_arm/99-ftdi_sio.rules /etc/udev/rules.d/

5. connect Mikata Arm. If USB2DXL is already connected, connect it again.

6. run installation script
  $ cd ~/mikata_arm_ws
  $ ./src/dynamixel_mikata_arm/install.sh

If script ended without errors, initial setup is completed.


/* EXECUTE SAMPLE PROGRAM */

To run sample programs, source setup.bash in the package:

  $ cd ~/mikata_arm_ws
  $ source ./devel/setup.bash

Then, run the code with roslaunch and/or rosrun. Launching the bringup node starts topics and services used to communicate with Mikata Arm DYNAMIXEL's. cli_control provides a control line interface for moving Mikata Arm, including teaching and IK demos.

For instance:

  execute ROS GUI sample
    $ roslaunch manipulator_bringup bringup.launch gui:=true
     - Wait for the initialization of the program to be completed
    $ roslaunch manipulator_bringup rviz.launch

or

  execute CLI sample
    $ roscore
    $ rosrun mikata_arm_toolbox cli_control

The 2 programs above cannot be run simultaneously.



/* PROGRAM EXPLANATION */


mikata_arm_bringup:

> bringup.launch : ROS sample program. Provides topics and services to communicate with the Mikata Arm. Can also use 'gui' option for simple GUI control.

> rviz.launch : Display Mikata Arm model in rviz. Requires bringup.launch to be running.

> motion_player_rviz.launch : Display Mikata Arm model and MotionPlayer information in rviz.

mikata_arm_toolbox:

> cli_control : Allows controlling the Mikata Arm through command line interface. Besides reading and writing to each actuator, also provides teaching and inverse kinematics examples.

> dxl_factory_reset : Reset settings of all DYNAMIXEL's.

> dxl_setup : Changes settings on DYNAMIXEL's in accordance to Mikata Arm's configuration. Needed in order to run cli_control program.

/**********************************************************************/

